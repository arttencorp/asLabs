name: Backup Diario a Google Drive
on:
  schedule:
    - cron: '30 5 * * *'
  workflow_dispatch: 

jobs:
  backup-database:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Configurar fecha
        id: date
        run: |
          echo "date=$(date +'%Y-%m-%d_%H-%M-%S')" >> $GITHUB_OUTPUT
          echo "date_simple=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT
      
      - name: Instalar PostgreSQL Client
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client
      
            - name: Crear backup de Supabase
        id: backup
        env:
          DATABASE_URL: ${{ secrets.SUPABASE_DATABASE_URL }}
        run: |
          echo "Iniciando backup..."
          
          sudo apt-get install -y netcat-openbsd
           
          DB_HOST=$(echo "$DATABASE_URL" | sed -n 's/.*@$[^:]*$:.*/\1/p')
          nc -zv -4 $DB_HOST 5432 || echo "Advertencia: No se pudo verificar conexión"
           
          pg_dump -4 "$DATABASE_URL" --no-owner --no-privileges --clean > backup.sql || \
          pg_dump "$DATABASE_URL" --no-owner --no-privileges --clean > backup.sql
           
          SIZE_ORIGINAL=$(ls -lh backup.sql | awk '{print $5}')
          echo "size_original=$SIZE_ORIGINAL" >> $GITHUB_OUTPUT
          tar -czf supabase-backup-${{ steps.date.outputs.date }}.tar.gz backup.sql

          SIZE_COMPRESSED=$(ls -lh supabase-backup-*.tar.gz | awk '{print $5}')
          echo "size_compressed=$SIZE_COMPRESSED" >> $GITHUB_OUTPUT
          
          echo "Backup creado: $SIZE_COMPRESSED (original: $SIZE_ORIGINAL)"
      
      - name: Instalar rclone
        run: |
          curl https://rclone.org/install.sh | sudo bash
      
      - name: Configurar rclone para Google Drive
        run: |
          mkdir -p ~/.config/rclone
          echo '${{ secrets.GOOGLE_DRIVE_CREDENTIALS }}' > sa.json
          rclone config create gdrive drive \
            scope=drive \
            service_account_file=sa.json
      
      - name: Subir backup a Google Drive
        run: |
          rclone copy supabase-backup-${{ steps.date.outputs.date }}.tar.gz gdrive:${{ secrets.GOOGLE_DRIVE_FOLDER_ID }}/
          echo "Backup subido exitosamente a Google Drive"
          rm sa.json
      
      - name: Enviar notificación de éxito
        if: success()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          secure: true
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: Backup Exitoso - ${{ steps.date.outputs.date_simple }}
          to: ${{ secrets.EMAIL_USERNAME }}
          from: GitHub Actions <${{ secrets.EMAIL_USERNAME }}>
          body: |
            El backup de Supabase se completó exitosamente.

            Fecha: ${{ steps.date.outputs.date_simple }}
            Hora: ${{ steps.date.outputs.date }}
            Tamaño original: ${{ steps.backup.size_original }}
            Tamaño comprimido: ${{ steps.backup.size_compressed }}
            Guardado en: Google Drive
            
            Archivo: supabase-backup-${{ steps.date.outputs.date }}.tar.gz
            
            ---
            Este es un backup automático ejecutado por GitHub Actions.
      
      - name: Limpiar archivos temporales
        if: always()
        run: rm -f backup.sql *.tar.gz sa.json
      
      - name: Enviar notificación de error
        if: failure()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          secure: true
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: FALLO Backup - ${{ steps.date.outputs.date_simple }}
          to: ${{ secrets.EMAIL_USERNAME }}
          from: GitHub Actions <${{ secrets.EMAIL_USERNAME }}>
          priority: high
          body: |
            El backup de Supabase ha FALLADO.
            
            Fecha: ${{ steps.date.outputs.date_simple }}
            Hora del intento: ${{ steps.date.outputs.date }}
            Estado: FALLIDO
            
            Por favor revisa los logs inmediatamente:
            https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
            
            Este error requiere atención inmediata para asegurar la integridad de los backups.
      
      - name: Notificar éxito final
        if: success()
        run: echo "Backup completado y notificación enviada"