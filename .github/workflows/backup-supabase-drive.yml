name: Backup Diario a Google Drive
on:
  schedule:
    - cron: '30 5 * * *'
  workflow_dispatch: 

jobs:
  backup-database:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Configurar fecha
        id: date
        run: |
          echo "date=$(date +'%Y-%m-%d_%H-%M-%S')" >> $GITHUB_OUTPUT
          echo "date_simple=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT
      
      - name: Crear backup usando CURL
        id: backup
        run: |
          echo "Iniciando backup..."
          
          # Usar la API REST de Supabase en lugar de pg_dump
          PROJECT_REF=$(echo "${{ secrets.SUPABASE_DATABASE_URL }}" | grep -oP 'db\.\K[^.]+')
          
          curl -X GET \
            "https://${PROJECT_REF}.supabase.co/rest/v1/" \
            -H "apikey: ${{ secrets.SUPABASE_ANON_KEY }}" \
            -H "Authorization: Bearer ${{ secrets.SUPABASE_SERVICE_KEY }}" \
            -o backup.json
          
          tar -czf supabase-backup-${{ steps.date.outputs.date }}.tar.gz backup.json
          
          SIZE=$(ls -lh supabase-backup-*.tar.gz | awk '{print $5}')
          echo "size_compressed=$SIZE" >> $GITHUB_OUTPUT
          
          echo "Backup creado: $SIZE"
      
      - name: Subir a GitHub Artifacts (más simple que Google Drive)
        uses: actions/upload-artifact@v3
        with:
          name: backup-${{ steps.date.outputs.date }}
          path: supabase-backup-*.tar.gz
          retention-days: 30
      
      - name: Notificar
        if: always()
        run: |
          if [ -f supabase-backup-*.tar.gz ]; then
            echo "BACKUP EXITOSO"
          else
            echo "BACKUP FALLÓ"
            exit 1
          fi