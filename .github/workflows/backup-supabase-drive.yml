name: Backup Diario a Google Drive
on:
  schedule:
    - cron: '30 5 * * *'
  workflow_dispatch: 

jobs:
  backup-database:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Configurar fecha
        id: date
        run: |
          echo "date=$(date +'%Y-%m-%d_%H-%M-%S')" >> $GITHUB_OUTPUT
          echo "date_simple=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT
      
      - name: Instalar PostgreSQL Client
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client-14
      
      - name: Crear backup de Supabase
        id: backup
        env:
          DATABASE_URL: ${{ secrets.SUPABASE_DATABASE_URL }}
        run: |
          echo "Iniciando backup..."
          pg_dump "$DATABASE_URL" --no-owner --no-privileges --clean > backup.sql
          
          # Obtener tamaño antes de comprimir
          SIZE_ORIGINAL=$(ls -lh backup.sql | awk '{print $5}')
          echo "size_original=$SIZE_ORIGINAL" >> $GITHUB_OUTPUT
          
          # Comprimir el backup
          tar -czf supabase-backup-${{ steps.date.outputs.date }}.tar.gz backup.sql
          
          # Obtener tamaño comprimido
          SIZE_COMPRESSED=$(ls -lh supabase-backup-*.tar.gz | awk '{print $5}')
          echo "size_compressed=$SIZE_COMPRESSED" >> $GITHUB_OUTPUT
          
          echo "Backup creado: $SIZE_COMPRESSED (original: $SIZE_ORIGINAL)"
      
      - name: Autenticar con Google
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GOOGLE_DRIVE_CREDENTIALS }}
      
      - name: Subir a Google Drive
        uses: adityak74/google-drive-upload-action@main
        with:
          credentials: ${{ secrets.GOOGLE_DRIVE_CREDENTIALS }}
          filename: supabase-backup-${{ steps.date.outputs.date }}.tar.gz
          folderId: ${{ secrets.GOOGLE_DRIVE_FOLDER_ID }}
          name: supabase-backup-${{ steps.date.outputs.date }}.tar.gz
      
      - name: Enviar notificación de éxito
        if: success()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          secure: true
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: Backup Exitoso - ${{ steps.date.outputs.date_simple }}
          to: ${{ secrets.EMAIL_USERNAME }}
          from: GitHub Actions <${{ secrets.EMAIL_USERNAME }}>
          body: |
            ¡El backup de Supabase se completó exitosamente!

            Fecha: ${{ steps.date.outputs.date_simple }}
            Hora: ${{ steps.date.outputs.date }}
            Tamaño original: ${{ steps.backup.size_original }}
            Tamaño comprimido: ${{ steps.backup.size_compressed }}
            Guardado en: Google Drive
            
            Archivo: supabase-backup-${{ steps.date.outputs.date }}.tar.gz
            
            ---
            Este es un backup automático ejecutado por GitHub Actions.
      
      - name: Limpiar archivos temporales
        if: always()
        run: rm -f backup.sql *.tar.gz
      
      - name: Enviar notificación de error
        if: failure()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          secure: true
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: FALLO Backup - ${{ steps.date.outputs.date_simple }}
          to: ${{ secrets.EMAIL_USERNAME }}
          from: GitHub Actions <${{ secrets.EMAIL_USERNAME }}>
          priority: high
          body: |
            ¡El backup de Supabase ha FALLADO!
            
            Fecha: ${{ steps.date.outputs.date_simple }}
            Hora del intento: ${{ steps.date.outputs.date }}
            Estado: FALLIDO
            
            Por favor revisa los logs inmediatamente:
            https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
            
            Este error requiere atención inmediata para asegurar la integridad de los backups.
      
      - name: Notificar éxito final
        if: success()
        run: echo "Backup completado y notificación enviada!"