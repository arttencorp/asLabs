name: Backup Diario de Base de Datos
on:
  schedule:
    - cron: '30 5 * * *'
  workflow_dispatch:

jobs:
  backup-database:
    runs-on: ubuntu-latest
    
    steps:
      - name: Instalar herramientas necesarias (jq, psql, dnsutils)
        run: sudo apt-get update && sudo apt-get install -y jq postgresql-client dnsutils

      - name: Configurar variables de fecha
        id: config
        run: |
          echo "date=$(date +'%Y-%m-%d_%H-%M-%S')" >> $GITHUB_OUTPUT
          echo "date_simple=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT

      - name: Autorizar IP del Runner en el firewall de Supabase
        id: authorize_ip
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
          PROJECT_ID: ${{ secrets.SUPABASE_PROJECT_ID }}
        run: |
          RUNNER_IP=$(curl -s ifconfig.me)
          echo "La IP del Runner es: $RUNNER_IP"
          echo "runner_ip=$RUNNER_IP" >> $GITHUB_OUTPUT

          CURRENT_RULES_JSON=$(curl -s -f -X GET \
            "https://api.supabase.com/v1/projects/$PROJECT_ID/network-restrictions" \
            -H "Authorization: Bearer $SUPABASE_ACCESS_TOKEN")
          
          if [ $? -ne 0 ]; then
            echo "::error::Falló la obtención de las reglas de red. ¿El PROJECT_ID y el ACCESS_TOKEN son correctos?"
            exit 1
          fi
          
          echo "Original rules: $CURRENT_RULES_JSON"
          echo "original_rules=$CURRENT_RULES_JSON" >> $GITHUB_OUTPUT

          NEW_RULES_JSON=$(echo "$CURRENT_RULES_JSON" | jq --arg ip "$RUNNER_IP/32" '.dbAllowedCidrs += [$ip]')

          echo "Aplicando nuevas reglas de red para permitir la IP: $RUNNER_IP..."
          curl -s -f -X POST \
            "https://api.supabase.com/v1/projects/$PROJECT_ID/network-restrictions/apply" \
            -H "Authorization: Bearer $SUPABASE_ACCESS_TOKEN" \
            -H "Content-Type: application/json" \
            --data-raw "$NEW_RULES_JSON"

          if [ $? -ne 0 ]; then
            echo "::error::Falló al aplicar las nuevas reglas de red."
            exit 1
          fi
          
          echo "Esperando 15 segundos para que la regla de red se aplique..."
          sleep 15

      - name: Crear backup de la Base de Datos
        id: backup
        env:
          DATABASE_URL: ${{ secrets.SUPABASE_DATABASE_URL }}
        run: |
          # --- INICIO DE LA CORRECCIÓN MÁGICA ---
          # Extraer el host de la URL (ej: aws-0-us-east-1.pooler.supabase.com)
          DB_HOST=$(echo "$DATABASE_URL" | awk -F@ '{print $2}' | awk -F: '{print $1}')
          # Obtener la dirección IPv4 de ese host
          DB_IP=$(dig +short A "$DB_HOST")
          # Añadir una regla al sistema para que SIEMPRE use esa IPv4 para ese host
          echo "$DB_IP $DB_HOST" | sudo tee -a /etc/hosts
          echo "Regla de /etc/hosts añadida para forzar IPv4: $DB_IP -> $DB_HOST"
          # --- FIN DE LA CORRECCIÓN MÁGICA ---

          echo "Iniciando backup..."
          FILENAME="supabase-backup-${{ steps.config.outputs.date }}.sql"
          pg_dump "$DATABASE_URL" --no-owner --no-privileges --clean > $FILENAME
          
          tar -czf "$FILENAME.tar.gz" $FILENAME
          
          SIZE=$(ls -lh "$FILENAME.tar.gz" | awk '{print $5}')
          echo "size_compressed=$SIZE" >> $GITHUB_OUTPUT
          echo "Backup creado: $SIZE"
      
      - name: Subir backup como artefacto
        uses: actions/upload-artifact@v4
        with:
          name: backup-${{ steps.config.outputs.date }}
          path: "*.tar.gz"
          retention-days: 30
      
      - name: Enviar notificación de éxito
        if: success()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          secure: true
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: Backup Exitoso - ${{ steps.config.outputs.date_simple }}
          to: ${{ secrets.EMAIL_USERNAME }}
          from: GitHub Actions <${{ secrets.EMAIL_USERNAME }}>
          body: |
            El backup de la base de datos se completó exitosamente.
            Tamaño del archivo comprimido: ${{ steps.backup.outputs.size_compressed }}
            Puedes descargarlo desde la sección de Artefactos en GitHub Actions.
            
      - name: Limpiar y restaurar firewall (SIEMPRE SE EJECUTA)
        if: always()
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
          PROJECT_ID: ${{ secrets.SUPABASE_PROJECT_ID }}
          ORIGINAL_RULES: ${{ steps.authorize_ip.outputs.original_rules }}
        run: |
          echo "Limpiando archivos locales..."
          rm -f *.sql *.tar.gz
          
          echo "Restaurando reglas originales del firewall..."
          if [[ -n "$ORIGINAL_RULES" && "$ORIGINAL_RULES" != *"Cannot GET"* ]]; then
            curl -s -X POST \
              "https://api.supabase.com/v1/projects/$PROJECT_ID/network-restrictions/apply" \
              -H "Authorization: Bearer $SUPABASE_ACCESS_TOKEN" \
              -H "Content-Type: application/json" \
              -d "$ORIGINAL_RULES"
            echo "Firewall restaurado a su estado original."
          else
            echo "No se encontraron reglas originales válidas para restaurar, omitiendo."
          fi